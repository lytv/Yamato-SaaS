/**
 * Excel Helper Functions
 * Following TypeScript Type Safety Standards
 * Generates Excel files for product export functionality
 */

import type { Buffer } from 'node:buffer';

import * as XLSX from 'xlsx';

import type { Product } from '@/types/product';

/**
 * Generate Excel workbook from products array
 * @param products - Array of products to export
 * @returns Buffer containing Excel file data
 */
export function generateProductsExcel(products: readonly Product[]): Buffer {
  // Create a new workbook
  const workbook = XLSX.utils.book_new();

  // Transform products data for Excel export
  const excelData = products.map(product => ({
    'Product Code': product.productCode,
    'Product Name': product.productName,
    'Category': product.category || '',
    'Notes': product.notes || '',
    'Created Date': formatDateForExcel(product.createdAt),
    'Updated Date': formatDateForExcel(product.updatedAt),
  }));

  // Create worksheet from data
  const worksheet = XLSX.utils.json_to_sheet(excelData);

  // Set column widths for better readability
  const columnWidths = [
    { wch: 15 }, // Product Code
    { wch: 30 }, // Product Name
    { wch: 20 }, // Category
    { wch: 40 }, // Notes
    { wch: 12 }, // Created Date
    { wch: 12 }, // Updated Date
  ];
  worksheet['!cols'] = columnWidths;

  // Add metadata sheet with export information
  const metadataSheet = XLSX.utils.json_to_sheet([
    { Field: 'Export Date', Value: new Date().toISOString() },
    { Field: 'Total Products', Value: products.length },
    { Field: 'Generated By', Value: 'Yamato SaaS Product Management' },
  ]);

  // Add sheets to workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Products');
  XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Export Info');

  // Generate buffer
  const excelBuffer = XLSX.write(workbook, {
    type: 'buffer',
    bookType: 'xlsx',
    compression: true,
  });

  return excelBuffer;
}

/**
 * Format date for Excel display
 * @param date - Date string or Date object
 * @returns Formatted date string
 */
function formatDateForExcel(date: string | Date): string {
  const dateObj = new Date(date);

  if (Number.isNaN(dateObj.getTime())) {
    return '';
  }

  return dateObj.toLocaleDateString('en-US', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  });
}

/**
 * Generate filename for Excel export
 * @param prefix - Filename prefix (default: 'products-export')
 * @returns Filename with timestamp
 */
export function generateExcelFilename(prefix: string = 'products-export'): string {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
  return `${prefix}-${timestamp}.xlsx`;
}

/**
 * Validate Excel export data
 * @param products - Products array to validate
 * @returns Validation result
 */
export function validateExcelExportData(products: readonly Product[]): {
  isValid: boolean;
  error?: string;
} {
  if (!Array.isArray(products)) {
    return { isValid: false, error: 'Products must be an array' };
  }

  if (products.length === 0) {
    return { isValid: false, error: 'No products to export' };
  }

  if (products.length > 5000) {
    return { isValid: false, error: 'Too many products to export (maximum 5000)' };
  }

  // Check if products have required fields
  const invalidProducts = products.filter(
    product => !product.productCode || !product.productName,
  );

  if (invalidProducts.length > 0) {
    return {
      isValid: false,
      error: `${invalidProducts.length} product(s) missing required fields`,
    };
  }

  return { isValid: true };
}
